package laborator8;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jdom2.Content;
import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
import org.jdom2.input.sax.XMLReaders;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;
import org.jdom2.transform.JDOMResult;
import org.jdom2.transform.JDOMSource;

public class ParseRecipe {

	@SuppressWarnings({ "resource", "unused" })
	public static void main(String[] args) throws IOException, JDOMException, TransformerException {
		// TODO Auto-generated method stub

		Workbook wb = new XSSFWorkbook();
		CreationHelper ch = wb.getCreationHelper();
		Sheet sh = wb.createSheet("MySheet");
		CellStyle cs1 = wb.createCellStyle();
		CellStyle cs2 = wb.createCellStyle();
		DataFormat df = wb.createDataFormat();
		Font f1 = wb.createFont();
		Font f2 = wb.createFont();

		f1.setFontHeightInPoints((short) 12);
		f1.setColor(IndexedColors.RED.getIndex());
		f1.setBoldweight(Font.BOLDWEIGHT_BOLD);

		f2.setFontHeightInPoints((short) 10);
		f2.setColor(IndexedColors.BLUE.getIndex());
		f2.setItalic(true);

		cs1.setFont(f1);
		cs1.setDataFormat(df.getFormat("#,##0.0"));

		cs2.setFont(f2);
		cs2.setBorderBottom(cs2.BORDER_THIN);
		cs2.setDataFormat(df.getFormat("text"));

		
		
		TransformerFactory tf = TransformerFactory.newInstance();
		//we go for the 2nd input  (the 2 steps refer to the preparation of the document)
		StreamSource ss = new StreamSource(new File("example.xslt"));
		Transformer tr = tf.newTransformer(ss);
		//we go for the first input
		SAXBuilder sb = new SAXBuilder();
		//we obtain a reference to the document that is built by SAXBuilder in the internal memory
		Document doc = sb.build(new File("recipe.xml"));
		JDOMSource in = new JDOMSource(doc);
		//we go for output 
		JDOMResult out = new JDOMResult();
		tr.transform(in, out);
		List<Content> result = out.getResult();
		System.out.println("Size = "+ result.size()+ "\n");
		XMLOutputter xo = new XMLOutputter();
		xo.setFormat(Format.getPrettyFormat());
		xo.output(result, System.out);
		
		for (int i = 0; i < 5; i++) {
			Row r = sh.createRow(i);
			for (int j = 0; j < 5; j++) {
				Cell c2 = r.createCell(j);
				c2.setCellStyle(cs2);
				c2.setCellValue("gol");
			}
		}
		
		
		
		FileOutputStream outf = new FileOutputStream("src/RecipesXSL.xlsx");
		wb.write(outf);
		outf.close();
		System.out.println("WbSaved");
	}

}
